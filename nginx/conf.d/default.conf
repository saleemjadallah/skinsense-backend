# Production-grade nginx configuration for blue-green deployment
# Uses Docker's internal DNS resolver to handle container switches dynamically

server {
    listen 80 default_server;
    server_name _;
    
    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Request-ID $request_id always;
    
    # Blue-green deployment with dynamic DNS resolution
    # This allows nginx to start even when one backend is unavailable
    location / {
        # Use variable to enable DNS resolution - this is the key!
        set $backend backend-blue:8000;  # Default to blue
        proxy_pass http://$backend;
        
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Connection "";
        
        # Timeouts and error handling
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Retry failed requests
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 10s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        set $backend backend-blue:8000;  # Will be updated dynamically
        proxy_pass http://$backend/health;
        proxy_set_header Host $host;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Nginx status for monitoring
    location /nginx-status {
        access_log off;
        default_type text/plain;
        return 200 "OK\n";
    }
}