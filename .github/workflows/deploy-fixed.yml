name: Fixed Zero-Downtime Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r app deployment/
        cp -r scripts deployment/ 2>/dev/null || mkdir -p deployment/scripts
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp docker-compose.yml deployment/
        cp nginx.conf deployment/ 2>/dev/null || true
        cp .dockerignore deployment/ 2>/dev/null || echo "# Dockerignore" > deployment/.dockerignore
        
        # Create .env file
        cat > deployment/.env << EOF
        APP_NAME="SkinSense AI"
        APP_VERSION="1.0.0"
        DEBUG=false
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        REDIS_URL=redis://redis:6379
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        ORBO_CLIENTID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        EOF
        
        # Create Firebase credentials if provided
        if [ ! -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
          mkdir -p deployment/credentials
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > deployment/credentials/firebase-service-account.json
        fi
        
        # Create tarball
        tar -czf deployment.tar.gz -C deployment .
        
        # Verify tarball was created
        ls -la deployment.tar.gz
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Transfer and Deploy
      run: |
        # Use a more robust approach - transfer to /tmp first
        echo "📦 Transferring deployment package to EC2..."
        scp -v -i ~/.ssh/ec2_key.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/deployment.tar.gz
        
        # Now run deployment script
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Move deployment package from /tmp to home
        if [ -f /tmp/deployment.tar.gz ]; then
          echo "✅ Found deployment package in /tmp"
          mv /tmp/deployment.tar.gz ~/deployment.tar.gz
        else
          echo "❌ Deployment package not found in /tmp!"
          exit 1
        fi
        
        # Verify it's in home directory now
        if [ ! -f ~/deployment.tar.gz ]; then
          echo "❌ Failed to move deployment package to home directory!"
          exit 1
        fi
        
        echo "✅ Deployment package ready"
        
        # Constants
        PROJECT_NAME="skinsense-backend"
        DEPLOY_DIR="$HOME/skinsense-backend"
        NEW_DIR="$HOME/skinsense-backend-new"
        
        # Clean up any previous failed deployment
        rm -rf $NEW_DIR
        
        # Extract new deployment
        mkdir -p $NEW_DIR
        cd $NEW_DIR
        
        echo "📦 Extracting deployment package..."
        tar -xzf ~/deployment.tar.gz
        
        # Verify extraction
        if [ ! -f docker-compose.yml ]; then
          echo "❌ docker-compose.yml not found after extraction!"
          echo "Extracted files:"
          ls -la
          exit 1
        fi
        
        echo "✅ Extraction successful"
        rm ~/deployment.tar.gz
        
        # Build new images
        echo "🔨 Building Docker images..."
        docker-compose build
        
        # Check if old deployment exists and is running
        OLD_RUNNING=false
        if [ -d "$DEPLOY_DIR" ] && docker ps | grep -q "$PROJECT_NAME"; then
          OLD_RUNNING=true
          echo "📊 Existing deployment detected"
        fi
        
        if [ "$OLD_RUNNING" = true ]; then
          echo "🔄 Performing zero-downtime update..."
          
          # Start new containers with temporary name
          docker-compose -p ${PROJECT_NAME}-new up -d
          
          # Wait for health check
          echo "⏳ Waiting for new deployment to be healthy..."
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          HEALTHY=false
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            if curl -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ New deployment is healthy!"
              HEALTHY=true
              break
            fi
            ATTEMPTS=$((ATTEMPTS + 1))
            echo "Attempt $ATTEMPTS/$MAX_ATTEMPTS - Waiting for health check..."
            sleep 5
          done
          
          if [ "$HEALTHY" = true ]; then
            # Stop old deployment gracefully
            echo "📦 Stopping old deployment..."
            cd $DEPLOY_DIR
            docker-compose -p $PROJECT_NAME down --timeout 30
            
            # Move directories
            mv $DEPLOY_DIR ${DEPLOY_DIR}.old.$(date +%s)
            mv $NEW_DIR $DEPLOY_DIR
            
            # Restart with production name
            cd $DEPLOY_DIR
            docker-compose -p ${PROJECT_NAME}-new down
            docker-compose -p $PROJECT_NAME up -d
            
            echo "✅ Zero-downtime update complete!"
          else
            echo "❌ New deployment health check failed!"
            docker-compose -p ${PROJECT_NAME}-new down
            rm -rf $NEW_DIR
            exit 1
          fi
        else
          echo "📦 Fresh deployment (no existing deployment found)..."
          
          # Move to production directory
          [ -d "$DEPLOY_DIR" ] && mv $DEPLOY_DIR ${DEPLOY_DIR}.old.$(date +%s)
          mv $NEW_DIR $DEPLOY_DIR
          cd $DEPLOY_DIR
          
          # Start containers
          docker-compose -p $PROJECT_NAME up -d
          
          # Health check
          echo "⏳ Waiting for deployment to be healthy..."
          sleep 20
          
          if curl -s http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ Deployment is healthy!"
          else
            echo "⚠️ Health check failed but containers may still be starting..."
            docker ps
          fi
        fi
        
        # Cleanup
        docker system prune -f > /dev/null 2>&1
        
        # Final status
        echo ""
        echo "📊 Final Status:"
        docker ps | grep $PROJECT_NAME || docker ps
        echo ""
        echo "🎉 Deployment complete!"
        echo "API: http://${{ secrets.EC2_HOST }}:8000"
        echo "Docs: http://${{ secrets.EC2_HOST }}:8000/docs"
        ENDSSH
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/ec2_key.pem deployment.tar.gz
        rm -rf deployment/