name: Zero-Downtime Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allows manual triggering

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to EC2 Server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script_stop: true
        script: |
          # Navigate to the backend directory
          cd /home/ubuntu/skinsense-backend
          
          # Pull latest changes
          git pull origin main
          
          # Create .env file from GitHub Secrets
          cat > .env <<EOF
          MONGODB_URL=${{ secrets.MONGODB_URL }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          
          # AI Services
          ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
          ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
          
          # AWS Services
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
          
          # Email Service
          ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
          
          # Firebase (optional)
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          EOF
          
          # Make deployment script executable
          chmod +x deploy-zero-downtime.sh
          
          # Run zero-downtime deployment
          ./deploy-zero-downtime.sh
          
          # Clean up sensitive data
          rm -f .env
    
    - name: Verify Deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script: |
          # Check if API is responding
          curl -f http://localhost/health || exit 1
          
          # Check active backend color
          docker exec skinsense_nginx cat /etc/nginx/conf.d/active_backend || echo "Unable to determine active backend"
          
          # Show container status
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    - name: Notify on Success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "API is now running with zero-downtime deployment."
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and rollback if necessary."