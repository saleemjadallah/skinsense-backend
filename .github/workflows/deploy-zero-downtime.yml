name: Zero-Downtime Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:  # Allows manual triggering

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Create .env file
      run: |
        cat > .env <<EOF
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_SERVICE_ACCOUNT=${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        EOF
    
    - name: Decode EC2 Key
      run: |
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2_key.pem
        chmod 600 ec2_key.pem
    
    - name: Deploy to EC2 Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key_path: ec2_key.pem
        port: 22
        script_stop: true
        command_timeout: 20m
        script: |
          echo "Starting deployment..."
          
          # Navigate to the backend directory
          cd /home/ubuntu/skinsense-backend || cd ~/skinsense-backend || { echo "Backend directory not found"; exit 1; }
          
          # Pull latest changes
          echo "Pulling latest code..."
          git pull origin main
          
          # Check if deploy script exists and make it executable
          if [ -f deploy-zero-downtime.sh ]; then
            echo "Making deployment script executable..."
            chmod +x deploy-zero-downtime.sh
            
            echo "Running zero-downtime deployment..."
            ./deploy-zero-downtime.sh
          else
            echo "Deploy script not found, using standard deployment..."
            docker-compose up -d --build
          fi
          
          echo "Deployment complete!"
    
    - name: Upload .env to Server
      if: success()
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key_path: ec2_key.pem
        port: 22
        source: ".env"
        target: "/home/ubuntu/skinsense-backend/"
        overwrite: true
    
    - name: Verify Deployment
      if: success()
      uses: appleboy/ssh-action@v1.0.3
      continue-on-error: true
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key_path: ec2_key.pem
        port: 22
        script: |
          # Wait a bit for services to start
          sleep 10
          
          # Check if API is responding
          echo "Checking API health..."
          curl -f http://localhost/health || curl -f http://localhost:8000/health || echo "Health check failed (may still be starting)"
          
          # Show container status
          echo "Container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
    
    - name: Clean up sensitive files
      if: always()
      run: |
        rm -f .env
        rm -f ec2_key.pem
    
    - name: Notify on Success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "API is now running with zero-downtime deployment."
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and rollback if necessary."