name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Zero-Downtime Blue-Green Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment environment
      run: |
        echo "üì¶ Preparing deployment package..."
        mkdir -p deployment
        
        # Copy application files
        cp -r app deployment/
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp .dockerignore deployment/ 2>/dev/null || echo -e "*.pyc\n__pycache__\n.env\n.env.*\n*.log" > deployment/.dockerignore
        
        # Create production .env file
        cat > deployment/.env << 'EOF'
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        REDIS_URL=redis://redis:6379
        ENVIRONMENT=production
        DEBUG=false
        BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        EOF
        
        # Copy deployment configurations
        cp docker-compose.production.yml deployment/
        cp -r nginx deployment/
        cp deploy.sh deployment/
        chmod +x deployment/deploy.sh
        
        # Create deployment archive
        tar -czf deployment.tar.gz -C deployment .
        echo "‚úÖ Deployment package ready ($(du -h deployment.tar.gz | cut -f1))"
    
    - name: Setup SSH connection
      run: |
        set -euo pipefail
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        printf '%s' "${{ secrets.EC2_KEY }}" | base64 --decode > ~/.ssh/deploy.pem
        chmod 600 ~/.ssh/deploy.pem
        if ! ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
          echo "Warning: ssh-keyscan failed for ${{ secrets.EC2_HOST }}; continuing without host key pre-cache."
        fi
    
    - name: Transfer deployment package
      run: |
        echo "üì§ Uploading to server..."
        scp -i ~/.ssh/deploy.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        echo "‚úÖ Upload complete"
    
    - name: Execute deployment
      run: |
        ssh -i ~/.ssh/deploy.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        set -e
        
        echo "üöÄ Starting deployment at $(date)"
        
        # Setup directories
        PROJECT_DIR="$HOME/skinsense-backend"
        BACKUP_DIR="$HOME/backups"
        
        # Create backup
        if [ -d "$PROJECT_DIR" ]; then
          mkdir -p "$BACKUP_DIR"
          echo "üì¶ Creating backup..."
          tar -czf "$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "$PROJECT_DIR" . 2>/dev/null || true
          
          # Keep only last 3 backups
          ls -t "$BACKUP_DIR"/backup-*.tar.gz 2>/dev/null | tail -n +4 | xargs rm -f 2>/dev/null || true
        fi
        
        # Extract new deployment
        mkdir -p "$PROJECT_DIR"
        cd "$PROJECT_DIR"
        echo "üìÇ Extracting deployment package..."
        tar -xzf /tmp/deployment.tar.gz
        rm -f /tmp/deployment.tar.gz
        
        # Execute deployment script
        echo "üîÑ Running blue-green deployment..."
        # Ensure the script runs on the server, not locally
        if [ -f deploy.sh ]; then
          ./deploy.sh
        else
          echo "Deploy script not found in extracted package"
          exit 1
        fi
        
        # Verify deployment
        echo "‚úÖ Deployment completed at $(date)"
        ENDSSH
    
    - name: Health check
      run: |
        echo "üè• Performing health check..."
        sleep 15
        
        # Check API health using the actual domain
        for i in {1..30}; do
          if curl -sf "http://api.skinsense.app/health" > /dev/null || curl -sf "http://56.228.12.81/health" > /dev/null; then
            echo "‚úÖ API is healthy!"
            exit 0
          fi
          echo "‚è≥ Waiting for API... ($i/30)"
          sleep 3
        done
        
        echo "‚ùå Health check failed!"
        echo "Debugging: Testing direct connection..."
        curl -I "http://56.228.12.81/health" || true
        exit 1
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy.pem
        rm -rf deployment deployment.tar.gz
