name: Build Docker Image (Optional Push)

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    # Only login to Docker Hub if credentials are provided
    - name: Check Docker Hub credentials
      id: docker_creds
      run: |
        if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "has_creds=true" >> $GITHUB_OUTPUT
          echo "✅ Docker Hub credentials found"
        else
          echo "has_creds=false" >> $GITHUB_OUTPUT
          echo "⚠️ Docker Hub credentials not found - will build locally only"
        fi
    
    - name: Log in to Docker Hub
      if: steps.docker_creds.outputs.has_creds == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Build image locally for testing
    - name: Build Docker image
      run: |
        # Ensure scripts directory exists (even if empty)
        mkdir -p scripts
        docker build -t skinsense-backend:latest .
        docker tag skinsense-backend:latest skinsense-backend:${{ github.sha }}
        echo "✅ Docker image built successfully"
    
    # Push to Docker Hub only if logged in
    - name: Push to Docker Hub
      if: steps.docker_creds.outputs.has_creds == 'true'
      run: |
        docker tag skinsense-backend:latest ${{ secrets.DOCKER_USERNAME }}/skinsense-backend:latest
        docker tag skinsense-backend:latest ${{ secrets.DOCKER_USERNAME }}/skinsense-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/skinsense-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/skinsense-backend:${{ github.sha }}
        echo "✅ Docker image pushed to Docker Hub"
    
    # Deploy to EC2 directly (without Docker Hub)
    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Check if EC2 credentials exist
        if [ -z "${{ secrets.EC2_KEY }}" ] || [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "⚠️ EC2 credentials not found - skipping deployment"
          exit 0
        fi
        
        echo "🚀 Deploying to EC2..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        
        # Decode EC2 key with error handling
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem 2>/dev/null || {
          echo "❌ Failed to decode EC2_KEY. Make sure it's properly base64 encoded."
          echo "To encode your key: base64 -i your-key.pem | tr -d '\n'"
          exit 1
        }
        
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        cd ~/skinsense-backend || { echo "Directory not found"; exit 1; }
        
        # Clean up existing containers and volumes
        docker-compose down -v || true
        docker system prune -f || true
        
        # Remove old images to avoid conflicts
        docker rmi $(docker images -q skinsense-backend_api) 2>/dev/null || true
        
        # Build new image locally on EC2
        docker-compose build --no-cache
        
        # Start containers fresh
        docker-compose up -d --force-recreate --remove-orphans
        
        # Wait for services
        sleep 10
        
        # Health check
        curl -f http://localhost:8000/health || { 
          echo "Health check failed"
          docker-compose logs --tail=50
          exit 1
        }
        
        # Clean up old images
        docker image prune -f
        
        echo "✅ Deployment successful!"
        EOF
        
        # Copy and execute deployment script
        scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x ~/deploy.sh && ~/deploy.sh"
        
        # Clean up
        rm -f ~/.ssh/ec2_key.pem deploy.sh
        
        echo "🎉 Deployment to EC2 completed!"
        echo "API URL: http://${{ secrets.EC2_HOST }}:8000"
        echo "Documentation: http://${{ secrets.EC2_HOST }}:8000/docs"