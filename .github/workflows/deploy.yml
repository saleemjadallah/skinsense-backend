name: Deploy to Production

on:
  push:
    branches: [main, master]  # Support both main and master
  workflow_dispatch:

jobs:
  deploy:
    name: Zero-Downtime Blue-Green Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment environment
      run: |
        echo "üì¶ Preparing deployment package..."
        mkdir -p deployment
        
        # Copy application files
        cp -r app deployment/
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp .dockerignore deployment/ 2>/dev/null || echo -e "*.pyc\n__pycache__\n.env\n.env.*\n*.log" > deployment/.dockerignore
        
        # Verify required secrets are set
        echo "üîê Verifying required secrets..."
        MISSING_SECRETS=""
        
        [ -z "${{ secrets.MONGODB_URL }}" ] && MISSING_SECRETS="$MISSING_SECRETS MONGODB_URL"
        [ -z "${{ secrets.SECRET_KEY }}" ] && MISSING_SECRETS="$MISSING_SECRETS SECRET_KEY"
        [ -z "${{ secrets.ORBO_AI_API_KEY }}" ] && MISSING_SECRETS="$MISSING_SECRETS ORBO_AI_API_KEY"
        [ -z "${{ secrets.ORBO_CLIENT_ID }}" ] && MISSING_SECRETS="$MISSING_SECRETS ORBO_CLIENT_ID"
        [ -z "${{ secrets.OPENAI_API_KEY }}" ] && MISSING_SECRETS="$MISSING_SECRETS OPENAI_API_KEY"
        [ -z "${{ secrets.EC2_HOST }}" ] && MISSING_SECRETS="$MISSING_SECRETS EC2_HOST"
        [ -z "${{ secrets.EC2_USER }}" ] && MISSING_SECRETS="$MISSING_SECRETS EC2_USER"
        [ -z "${{ secrets.EC2_KEY }}" ] && MISSING_SECRETS="$MISSING_SECRETS EC2_KEY"
        
        if [ -n "$MISSING_SECRETS" ]; then
          echo "‚ùå Missing required secrets:$MISSING_SECRETS"
          echo "Please add these secrets to your GitHub repository settings."
          exit 1
        fi
        echo "‚úÖ All required secrets are configured"
        
        # Create production .env file
        cat > deployment/.env << 'EOF'
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        REDIS_URL=redis://redis:6379
        ENVIRONMENT=production
        DEBUG=false
        BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        EOF
        
        # Copy deployment configurations
        cp docker-compose.production.yml deployment/
        cp -r nginx deployment/
        cp deploy.sh deployment/
        chmod +x deployment/deploy.sh
        
        # Create deployment archive
        tar -czf deployment.tar.gz -C deployment .
        echo "‚úÖ Deployment package ready ($(du -h deployment.tar.gz | cut -f1))"
    
    - name: Setup SSH connection
      run: |
        echo "üîê Setting up SSH connection..."
        mkdir -p ~/.ssh
        
        # Decode and save EC2 key
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/deploy.pem
        chmod 600 ~/.ssh/deploy.pem
        
        # Verify key format
        if ! ssh-keygen -l -f ~/.ssh/deploy.pem > /dev/null 2>&1; then
          echo "‚ùå Invalid EC2 private key format!"
          exit 1
        fi
        
        # Add host to known_hosts with retry
        for i in {1..3}; do
          if ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ Host key added to known_hosts"
            break
          else
            echo "‚ö†Ô∏è Failed to scan host key, attempt $i/3"
            sleep 2
          fi
        done
        
        # Test SSH connection
        echo "üß™ Testing SSH connection..."
        if ssh -i ~/.ssh/deploy.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"; then
          echo "‚úÖ SSH connection verified"
        else
          echo "‚ùå SSH connection failed!"
          exit 1
        fi
    
    - name: Transfer deployment package
      run: |
        echo "üì§ Uploading to server..."
        scp -i ~/.ssh/deploy.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        echo "‚úÖ Upload complete"
    
    - name: Execute deployment
      run: |
        ssh -i ~/.ssh/deploy.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        set -e
        
        echo "üöÄ Starting deployment at $(date)"
        
        # Setup directories
        PROJECT_DIR="$HOME/skinsense-backend"
        BACKUP_DIR="$HOME/backups"
        
        # Create backup
        if [ -d "$PROJECT_DIR" ]; then
          mkdir -p "$BACKUP_DIR"
          echo "üì¶ Creating backup..."
          tar -czf "$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "$PROJECT_DIR" . 2>/dev/null || true
          
          # Keep only last 3 backups
          ls -t "$BACKUP_DIR"/backup-*.tar.gz 2>/dev/null | tail -n +4 | xargs rm -f 2>/dev/null || true
        fi
        
        # Extract new deployment
        mkdir -p "$PROJECT_DIR"
        cd "$PROJECT_DIR"
        echo "üìÇ Extracting deployment package..."
        tar -xzf /tmp/deployment.tar.gz
        rm -f /tmp/deployment.tar.gz
        
        # Execute deployment script with better error handling
        echo "üîÑ Running blue-green deployment..."
        if ./deploy.sh; then
          echo "‚úÖ Deployment script completed successfully"
        else
          echo "‚ùå Deployment script failed!"
          echo "üîç Getting container status for debugging..."
          docker ps -a || true
          docker logs skinsense_nginx --tail 20 || true
          docker logs skinsense_backend_blue --tail 20 || true
          docker logs skinsense_backend_green --tail 20 || true
          exit 1
        fi
        
        # Verify deployment
        echo "‚úÖ Deployment completed at $(date)"
        ENDSSH
    
    - name: Health check
      run: |
        echo "üè• Performing health check..."
        sleep 30  # Give more time for containers to fully start
        
        # Check API health with better error handling
        HEALTH_CHECK_PASSED=false
        
        for i in {1..40}; do  # Increased attempts
          echo "‚è≥ Health check attempt $i/40..."
          
          # Try multiple endpoints
          if curl -sf --connect-timeout 10 --max-time 30 "http://api.skinsense.app/health" > /dev/null; then
            echo "‚úÖ API is healthy via domain!"
            HEALTH_CHECK_PASSED=true
            break
          elif curl -sf --connect-timeout 10 --max-time 30 "http://56.228.12.81/health" > /dev/null; then
            echo "‚úÖ API is healthy via IP!"
            HEALTH_CHECK_PASSED=true
            break
          elif curl -sf --connect-timeout 10 --max-time 30 "http://56.228.12.81:80/health" > /dev/null; then
            echo "‚úÖ API is healthy via IP:80!"
            HEALTH_CHECK_PASSED=true
            break
          fi
          
          sleep 5  # Increased sleep time
        done
        
        if [ "$HEALTH_CHECK_PASSED" = true ]; then
          echo "‚úÖ Health check successful!"
          exit 0
        else
          echo "‚ùå Health check failed after all attempts!"
          echo "üîç Debugging information:"
          curl -v --connect-timeout 10 "http://56.228.12.81/health" || true
          echo "Trying to get container status via SSH..."
          ssh -i ~/.ssh/deploy.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "docker ps && docker logs skinsense_nginx --tail 20" || true
          exit 1
        fi
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy.pem
        rm -rf deployment deployment.tar.gz