name: Reliable Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create deployment package
      run: |
        echo "üì¶ Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy all necessary files
        cp -r app deployment/
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp docker-compose.yml deployment/
        [ -f nginx.conf ] && cp nginx.conf deployment/ || true
        [ -f .dockerignore ] && cp .dockerignore deployment/ || echo "*.pyc\n__pycache__\n.env.local" > deployment/.dockerignore
        [ -d scripts ] && cp -r scripts deployment/ || mkdir deployment/scripts
        
        # Create .env file with all secrets
        cat > deployment/.env << 'EOF'
        APP_NAME="SkinSense AI"
        APP_VERSION="1.0.0"
        DEBUG=false
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        REDIS_URL=redis://redis:6379
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        ORBO_CLIENTID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        EOF
        
        # Create tarball and verify
        tar -czf deployment.tar.gz -C deployment .
        TAR_SIZE=$(wc -c < deployment.tar.gz)
        echo "‚úÖ Deployment package created: $TAR_SIZE bytes"
        
        if [ "$TAR_SIZE" -lt 1000 ]; then
          echo "‚ùå Deployment package too small!"
          exit 1
        fi
    
    - name: Deploy to EC2
      env:
        EC2_KEY: ${{ secrets.EC2_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$EC2_KEY" | base64 -d > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
        
        # Transfer package
        echo "üì§ Transferring to EC2..."
        scp -i ~/.ssh/ec2_key.pem deployment.tar.gz ${EC2_USER}@${EC2_HOST}:/tmp/
        
        # Deploy
        echo "üöÄ Deploying..."
        ssh -i ~/.ssh/ec2_key.pem ${EC2_USER}@${EC2_HOST} << 'ENDSSH'
        set -e
        
        echo "Starting deployment process..."
        
        # Move package
        [ -f /tmp/deployment.tar.gz ] && mv /tmp/deployment.tar.gz ~/
        
        # Constants
        PROJECT="skinsense-backend"
        DEPLOY_DIR="$HOME/$PROJECT"
        
        # Backup current deployment
        if [ -d "$DEPLOY_DIR" ]; then
          echo "Backing up current deployment..."
          cp -r $DEPLOY_DIR ${DEPLOY_DIR}.backup.$(date +%Y%m%d_%H%M%S)
        fi
        
        # Create/clean deployment directory
        mkdir -p $DEPLOY_DIR
        cd $DEPLOY_DIR
        
        # Extract new files
        echo "Extracting deployment package..."
        tar -xzf ~/deployment.tar.gz
        rm ~/deployment.tar.gz
        
        # Stop old containers gracefully
        echo "Stopping old containers..."
        docker-compose down --timeout 30 2>/dev/null || true
        
        # Clean up Docker resources
        docker system prune -f
        
        # Build new images
        echo "Building Docker images..."
        docker-compose build
        
        # Start new containers
        echo "Starting containers..."
        docker-compose up -d
        
        # Wait for initialization
        echo "Waiting for services to initialize..."
        sleep 20
        
        # Health check with multiple attempts
        echo "Performing health checks..."
        HEALTHY=false
        for i in {1..15}; do
          echo "Attempt $i/15..."
          
          if curl -s -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "‚úÖ API is healthy!"
            HEALTHY=true
            break
          fi
          
          # Check if containers are running
          if ! docker ps | grep -q $PROJECT; then
            echo "Containers not running, checking logs..."
            docker-compose logs --tail 20
            docker-compose up -d
          fi
          
          sleep 10
        done
        
        if [ "$HEALTHY" = false ]; then
          echo "‚ö†Ô∏è Health check failed but containers are running:"
          docker ps
          echo "Recent logs:"
          docker-compose logs --tail 50
        fi
        
        # Setup nginx if not configured
        if ! [ -f /etc/nginx/sites-enabled/skinsense-api ]; then
          echo "Configuring nginx..."
          sudo tee /etc/nginx/sites-available/skinsense-api << 'NGINX'
        server {
          listen 80;
          server_name api.skinsense.app;
          
          location / {
            proxy_pass http://localhost:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            client_max_body_size 100M;
          }
        }
        NGINX
          
          sudo ln -sf /etc/nginx/sites-available/skinsense-api /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
        fi
        
        echo "üéâ Deployment complete!"
        echo "API: http://${EC2_HOST}:8000"
        docker ps
        ENDSSH
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/ec2_key.pem deployment.tar.gz
        rm -rf deployment/