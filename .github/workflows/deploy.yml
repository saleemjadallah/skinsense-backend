name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create deployment package
      run: |
        # Create temporary directory
        mkdir -p deployment
        
        # Copy necessary files
        cp -r app deployment/
        cp -r scripts deployment/ 2>/dev/null || mkdir -p deployment/scripts
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp docker-compose.yml deployment/  # IMPORTANT: Copy docker-compose.yml
        cp docker-compose.prod.yml deployment/ 2>/dev/null || true
        cp .dockerignore deployment/
        
        # Create .env file with production secrets
        cat > deployment/.env << EOF
        APP_NAME="SkinSense AI"
        APP_VERSION="1.0.0"
        DEBUG=false
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        REDIS_URL=redis://redis:6379
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        ORBO_CLIENTID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        ZEPTOMAIL_HOST=api.zeptomail.com
        ZEPTOMAIL_DOMAIN=skinsense.app
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_SERVICE_ACCOUNT_PATH=/app/credentials/firebase-service-account.json
        PROMETHEUS_URL=http://prometheus:9090
        GRAFANA_URL=http://grafana:3001
        EOF
        
        # Create Firebase credentials if provided
        if [ ! -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
          mkdir -p deployment/credentials
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > deployment/credentials/firebase-service-account.json
        fi
        
        # Create tarball
        tar -czf deployment.tar.gz -C deployment .
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        
        # Decode EC2 key with error handling
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem 2>/dev/null || {
          echo "‚ùå Failed to decode EC2_KEY. Make sure it's properly base64 encoded."
          echo "To encode your key: base64 -i your-key.pem | tr -d '\n'"
          exit 1
        }
        
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Copy deployment package to EC2
      run: |
        scp -i ~/.ssh/ec2_key.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
    
    - name: Deploy on EC2 with Docker Compose
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        echo "üöÄ Starting deployment..."
        
        # STEP 1: Upgrade docker-compose to fix ContainerConfig bug
        echo "üì¶ Step 1: Checking and upgrading docker-compose..."
        COMPOSE_VERSION=$(docker-compose --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.0")
        echo "Current docker-compose version: $COMPOSE_VERSION"
        
        # Install Docker Compose v2 (plugin version) which doesn't have the ContainerConfig bug
        echo "Installing Docker Compose v2 (plugin)..."
        sudo mkdir -p /usr/local/lib/docker/cli-plugins
        sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
        sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
        
        # Also update standalone docker-compose
        sudo curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
        echo "Docker Compose updated to: $(docker-compose version)"
        
        # STEP 2: Clean up with proper docker-compose down
        echo "üì¶ Step 2: Cleaning up existing deployment..."
        cd ~/skinsense-backend 2>/dev/null && docker-compose down --volumes --remove-orphans 2>/dev/null || true
        
        # STEP 3: Nuclear cleanup of corrupted containers
        echo "üì¶ Step 3: Removing corrupted containers, volumes, and networks..."
        docker ps -aq | xargs -r docker rm -f 2>/dev/null || true
        docker volume ls -q | xargs -r docker volume rm -f 2>/dev/null || true
        
        # Specifically remove the skinsense-backend network if it exists
        docker network rm skinsense-backend_default 2>/dev/null || true
        
        # Remove all custom networks (keep default ones)
        docker network ls --format "{{.Name}}" | grep -v "bridge\|host\|none" | xargs -r docker network rm 2>/dev/null || true
        docker network prune -f 2>/dev/null || true
        
        # STEP 4: Clean Docker system
        echo "üì¶ Step 4: Cleaning Docker system..."
        docker system prune -af --volumes 2>/dev/null || true
        
        # If still having issues, restart Docker daemon
        if docker ps 2>&1 | grep -q "ContainerConfig"; then
          echo "‚ö†Ô∏è ContainerConfig error detected, restarting Docker..."
          sudo systemctl restart docker
          sleep 5
        fi
        
        # Backup old deployment
        if [ -d ~/skinsense-backend ]; then
          mv ~/skinsense-backend ~/skinsense-backend.backup.$(date +%Y%m%d_%H%M%S)
        fi
        
        # Create new deployment directory
        mkdir -p ~/skinsense-backend
        cd ~/skinsense-backend
        
        # Extract deployment package
        tar -xzf ~/deployment.tar.gz
        rm ~/deployment.tar.gz
        
        # Verify docker-compose.yml exists
        if [ ! -f docker-compose.yml ]; then
          echo "‚ùå docker-compose.yml not found!"
          exit 1
        fi
        
        echo "‚úÖ docker-compose.yml found"
        
        # Deploy with docker-compose (v2 should work without ContainerConfig issues)
        echo "üî® Building and deploying with Docker Compose v2..."
        
        # Use the new docker compose command (without hyphen) if available
        if command -v docker &> /dev/null && docker compose version &> /dev/null; then
          echo "Using Docker Compose v2 plugin..."
          docker compose build --no-cache
          docker compose up -d --force-recreate --remove-orphans
          sleep 10
          docker compose ps
          docker compose logs --tail=50
        else
          echo "Using standalone docker-compose..."
          docker-compose build --no-cache
          docker-compose up -d --force-recreate --remove-orphans
          sleep 10
          docker-compose ps
          docker-compose logs --tail=50
        fi
        
        echo "‚úÖ Docker Compose deployment completed!"
        
        # Health check
        echo "üè• Running health check..."
        sleep 5
        if curl -f http://localhost:8000/health; then
          echo "‚úÖ Health check passed!"
          echo "üéâ Deployment successful!"
          echo "üìä Service status:"
          docker ps
        else
          echo "‚ùå Health check failed. Checking logs..."
          docker ps -a
          if command -v docker &> /dev/null && docker compose version &> /dev/null; then
            docker compose logs --tail=100
          else
            docker-compose logs --tail=100
          fi
          exit 1
        fi
        ENDSSH
    
    - name: Clean up
      if: always()
      run: |
        rm -f ~/.ssh/ec2_key.pem
        rm -f deployment.tar.gz
        rm -rf deployment/
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Deployment to EC2 successful!"
          echo "API URL: http://${{ secrets.EC2_HOST }}:8000"
          echo "Documentation: http://${{ secrets.EC2_HOST }}:8000/docs"
        else
          echo "‚ùå Deployment failed. Check the logs for details."
        fi