name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    # Note: AWS credentials configuration not needed for SSH deployment
    # AWS credentials are passed to the app via .env file below
    
    - name: Create deployment package
      run: |
        # Create temporary directory
        mkdir -p deployment
        
        # Copy necessary files
        cp -r app deployment/
        cp -r scripts deployment/ 2>/dev/null || mkdir -p deployment/scripts
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp .dockerignore deployment/
        
        # Create .env file with production secrets
        # This includes AWS credentials that the APP needs (not GitHub Actions)
        cat > deployment/.env << EOF
        APP_NAME="SkinSense AI"
        APP_VERSION="1.0.0"
        DEBUG=false
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        REDIS_URL=redis://redis:6379
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        ORBO_CLIENTID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        # AWS credentials for S3 access (used by the app, not GitHub Actions)
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        ZEPTOMAIL_HOST=api.zeptomail.com
        ZEPTOMAIL_DOMAIN=skinsense.app
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_SERVICE_ACCOUNT_PATH=/app/credentials/firebase-service-account.json
        PROMETHEUS_URL=http://prometheus:9090
        GRAFANA_URL=http://grafana:3001
        EOF
        
        # Create Firebase credentials if provided
        if [ ! -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
          mkdir -p deployment/credentials
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > deployment/credentials/firebase-service-account.json
        fi
        
        # Create tarball
        tar -czf deployment.tar.gz -C deployment .
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        
        # Decode EC2 key with error handling
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem 2>/dev/null || {
          echo "❌ Failed to decode EC2_KEY. Make sure it's properly base64 encoded."
          echo "To encode your key: base64 -i your-key.pem | tr -d '\n'"
          exit 1
        }
        
        chmod 600 ~/.ssh/ec2_key.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Copy deployment package to EC2
      run: |
        scp -i ~/.ssh/ec2_key.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/
    
    - name: Deploy on EC2 (Simple Docker Method)
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        echo "🚀 Starting deployment (bypassing docker-compose)..."
        
        # Stop and remove ALL containers
        echo "📦 Stopping existing containers..."
        docker stop $(docker ps -aq) 2>/dev/null || true
        docker rm $(docker ps -aq) 2>/dev/null || true
        
        # Clean up Docker system
        echo "🧹 Cleaning up Docker..."
        docker system prune -af --volumes || true
        
        # Backup and prepare directory
        if [ -d ~/skinsense-backend ]; then
          mv ~/skinsense-backend ~/skinsense-backend.backup.$(date +%Y%m%d_%H%M%S)
        fi
        
        # Create new deployment directory
        mkdir -p ~/skinsense-backend
        cd ~/skinsense-backend
        
        # Extract deployment package
        tar -xzf ~/deployment.tar.gz
        rm ~/deployment.tar.gz
        
        # Build the Docker image
        echo "🔨 Building Docker image..."
        docker build -t skinsense-api:latest .
        
        # Start Redis container
        echo "🚀 Starting Redis..."
        docker run -d \
          --name redis \
          --restart always \
          -p 6379:6379 \
          redis:7-alpine
        
        # Wait for Redis to be ready
        sleep 3
        
        # Start API container
        echo "🚀 Starting API..."
        docker run -d \
          --name api \
          --restart always \
          -p 8000:8000 \
          --link redis:redis \
          -e REDIS_URL=redis://redis:6379 \
          --env-file .env \
          skinsense-api:latest
        
        # Wait for services to be healthy
        sleep 10
        
        # Check if containers are running
        echo "✅ Checking services..."
        docker ps
        
        # Show API logs
        echo "📋 API logs:"
        docker logs api --tail=50
        
        # Health check
        curl -f http://localhost:8000/health || {
          echo "⚠️ Health check failed. Checking logs..."
          docker logs api --tail=100
          exit 1
        }
        
        echo "✅ Deployment successful!"
        echo "AWS credentials are configured in the app's .env file for S3 access"
        ENDSSH
    
    - name: Clean up
      if: always()
      run: |
        rm -f ~/.ssh/ec2_key.pem
        rm -f deployment.tar.gz
        rm -rf deployment/
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🚀 Deployment to EC2 successful!"
          echo "API URL: http://${{ secrets.EC2_HOST }}:8000"
          echo "Documentation: http://${{ secrets.EC2_HOST }}:8000/docs"
          echo ""
          echo "✅ Deployment method: Plain Docker (no docker-compose)"
          echo "✅ AWS credentials configured for S3/CloudFront access"
        else
          echo "❌ Deployment failed. Check the logs for details."
        fi