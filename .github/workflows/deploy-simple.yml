name: Simple Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Simple Docker Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment package
      run: |
        echo "üì¶ Preparing deployment package..."
        mkdir -p deployment
        
        # Copy application files
        cp -r app deployment/
        cp requirements.txt deployment/
        cp Dockerfile deployment/
        cp .dockerignore deployment/ 2>/dev/null || echo -e "*.pyc\n__pycache__\n.env\n.env.*\n*.log" > deployment/.dockerignore
        
        # Create production .env file
        cat > deployment/.env << 'EOF'
        MONGODB_URL=${{ secrets.MONGODB_URL }}
        DATABASE_NAME=skinpal
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        ALGORITHM=HS256
        ACCESS_TOKEN_EXPIRE_MINUTES=60
        REFRESH_TOKEN_EXPIRE_DAYS=30
        ORBO_AI_API_KEY=${{ secrets.ORBO_AI_API_KEY }}
        ORBO_CLIENT_ID=${{ secrets.ORBO_CLIENT_ID }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
        CLOUDFRONT_DOMAIN=${{ secrets.CLOUDFRONT_DOMAIN }}
        ZEPTOMAIL_SEND_TOKEN=${{ secrets.ZEPTOMAIL_SEND_TOKEN }}
        REDIS_URL=redis://redis:6379
        ENVIRONMENT=production
        DEBUG=false
        BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        EOF
        
        # Copy deployment files
        cp docker-compose.simple.yml deployment/docker-compose.yml
        cp -r nginx deployment/
        cp deploy-simple.sh deployment/deploy.sh
        chmod +x deployment/deploy.sh
        
        # Create deployment archive
        tar -czf deployment.tar.gz -C deployment .
        echo "‚úÖ Deployment package ready ($(du -h deployment.tar.gz | cut -f1))"
    
    - name: Setup SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" | base64 -d > ~/.ssh/deploy.pem
        chmod 600 ~/.ssh/deploy.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
    
    - name: Transfer and deploy
      run: |
        # Upload deployment package
        scp -i ~/.ssh/deploy.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Execute deployment
        ssh -i ~/.ssh/deploy.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
        set -e
        
        # Setup directories
        PROJECT_DIR="$HOME/skinsense-backend"
        mkdir -p "$PROJECT_DIR"
        cd "$PROJECT_DIR"
        
        # Extract deployment
        tar -xzf /tmp/deployment.tar.gz
        rm -f /tmp/deployment.tar.gz
        
        # Run simple deployment
        ./deploy.sh
        
        echo "‚úÖ Deployment completed at $(date)"
        ENDSSH
    
    - name: Health check
      run: |
        echo "üè• Performing health check..."
        sleep 10
        
        # Simple health check
        for i in {1..20}; do
          if curl -sf "http://56.228.12.81/health" > /dev/null; then
            echo "‚úÖ API is healthy!"
            exit 0
          fi
          echo "‚è≥ Waiting for API... ($i/20)"
          sleep 3
        done
        
        echo "‚ö†Ô∏è Health check timeout - checking container status..."
        ssh -i ~/.ssh/deploy.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'docker ps'
        exit 1
    
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy.pem
        rm -rf deployment deployment.tar.gz